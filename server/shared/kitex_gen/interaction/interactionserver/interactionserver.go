// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionserver

import (
	"context"
	interaction "github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/interaction"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServerServiceInfo
}

var interactionServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionServer"
	handlerType := (*interaction.InteractionServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"Favorite":               kitex.NewMethodInfo(favoriteHandler, newInteractionServerFavoriteArgs, newInteractionServerFavoriteResult, false),
		"GetFavoriteVideoIdList": kitex.NewMethodInfo(getFavoriteVideoIdListHandler, newInteractionServerGetFavoriteVideoIdListArgs, newInteractionServerGetFavoriteVideoIdListResult, false),
		"GetFavoriteCount":       kitex.NewMethodInfo(getFavoriteCountHandler, newInteractionServerGetFavoriteCountArgs, newInteractionServerGetFavoriteCountResult, false),
		"BatchGetFavoriteCount":  kitex.NewMethodInfo(batchGetFavoriteCountHandler, newInteractionServerBatchGetFavoriteCountArgs, newInteractionServerBatchGetFavoriteCountResult, false),
		"Comment":                kitex.NewMethodInfo(commentHandler, newInteractionServerCommentArgs, newInteractionServerCommentResult, false),
		"GetCommentList":         kitex.NewMethodInfo(getCommentListHandler, newInteractionServerGetCommentListArgs, newInteractionServerGetCommentListResult, false),
		"GetCommentCount":        kitex.NewMethodInfo(getCommentCountHandler, newInteractionServerGetCommentCountArgs, newInteractionServerGetCommentCountResult, false),
		"CheckFavorite":          kitex.NewMethodInfo(checkFavoriteHandler, newInteractionServerCheckFavoriteArgs, newInteractionServerCheckFavoriteResult, false),
		"BatchGetCommentCount":   kitex.NewMethodInfo(batchGetCommentCountHandler, newInteractionServerBatchGetCommentCountArgs, newInteractionServerBatchGetCommentCountResult, false),
		"BatchCheckFavorite":     kitex.NewMethodInfo(batchCheckFavoriteHandler, newInteractionServerBatchCheckFavoriteArgs, newInteractionServerBatchCheckFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerFavoriteArgs)
	realResult := result.(*interaction.InteractionServerFavoriteResult)
	success, err := handler.(interaction.InteractionServer).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerFavoriteArgs() interface{} {
	return interaction.NewInteractionServerFavoriteArgs()
}

func newInteractionServerFavoriteResult() interface{} {
	return interaction.NewInteractionServerFavoriteResult()
}

func getFavoriteVideoIdListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetFavoriteVideoIdListArgs)
	realResult := result.(*interaction.InteractionServerGetFavoriteVideoIdListResult)
	success, err := handler.(interaction.InteractionServer).GetFavoriteVideoIdList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetFavoriteVideoIdListArgs() interface{} {
	return interaction.NewInteractionServerGetFavoriteVideoIdListArgs()
}

func newInteractionServerGetFavoriteVideoIdListResult() interface{} {
	return interaction.NewInteractionServerGetFavoriteVideoIdListResult()
}

func getFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetFavoriteCountArgs)
	realResult := result.(*interaction.InteractionServerGetFavoriteCountResult)
	success, err := handler.(interaction.InteractionServer).GetFavoriteCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetFavoriteCountArgs() interface{} {
	return interaction.NewInteractionServerGetFavoriteCountArgs()
}

func newInteractionServerGetFavoriteCountResult() interface{} {
	return interaction.NewInteractionServerGetFavoriteCountResult()
}

func batchGetFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerBatchGetFavoriteCountArgs)
	realResult := result.(*interaction.InteractionServerBatchGetFavoriteCountResult)
	success, err := handler.(interaction.InteractionServer).BatchGetFavoriteCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerBatchGetFavoriteCountArgs() interface{} {
	return interaction.NewInteractionServerBatchGetFavoriteCountArgs()
}

func newInteractionServerBatchGetFavoriteCountResult() interface{} {
	return interaction.NewInteractionServerBatchGetFavoriteCountResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCommentArgs)
	realResult := result.(*interaction.InteractionServerCommentResult)
	success, err := handler.(interaction.InteractionServer).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCommentArgs() interface{} {
	return interaction.NewInteractionServerCommentArgs()
}

func newInteractionServerCommentResult() interface{} {
	return interaction.NewInteractionServerCommentResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetCommentListArgs)
	realResult := result.(*interaction.InteractionServerGetCommentListResult)
	success, err := handler.(interaction.InteractionServer).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetCommentListArgs() interface{} {
	return interaction.NewInteractionServerGetCommentListArgs()
}

func newInteractionServerGetCommentListResult() interface{} {
	return interaction.NewInteractionServerGetCommentListResult()
}

func getCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetCommentCountArgs)
	realResult := result.(*interaction.InteractionServerGetCommentCountResult)
	success, err := handler.(interaction.InteractionServer).GetCommentCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetCommentCountArgs() interface{} {
	return interaction.NewInteractionServerGetCommentCountArgs()
}

func newInteractionServerGetCommentCountResult() interface{} {
	return interaction.NewInteractionServerGetCommentCountResult()
}

func checkFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCheckFavoriteArgs)
	realResult := result.(*interaction.InteractionServerCheckFavoriteResult)
	success, err := handler.(interaction.InteractionServer).CheckFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCheckFavoriteArgs() interface{} {
	return interaction.NewInteractionServerCheckFavoriteArgs()
}

func newInteractionServerCheckFavoriteResult() interface{} {
	return interaction.NewInteractionServerCheckFavoriteResult()
}

func batchGetCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerBatchGetCommentCountArgs)
	realResult := result.(*interaction.InteractionServerBatchGetCommentCountResult)
	success, err := handler.(interaction.InteractionServer).BatchGetCommentCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerBatchGetCommentCountArgs() interface{} {
	return interaction.NewInteractionServerBatchGetCommentCountArgs()
}

func newInteractionServerBatchGetCommentCountResult() interface{} {
	return interaction.NewInteractionServerBatchGetCommentCountResult()
}

func batchCheckFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerBatchCheckFavoriteArgs)
	realResult := result.(*interaction.InteractionServerBatchCheckFavoriteResult)
	success, err := handler.(interaction.InteractionServer).BatchCheckFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerBatchCheckFavoriteArgs() interface{} {
	return interaction.NewInteractionServerBatchCheckFavoriteArgs()
}

func newInteractionServerBatchCheckFavoriteResult() interface{} {
	return interaction.NewInteractionServerBatchCheckFavoriteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Favorite(ctx context.Context, req *interaction.DouyinFavoriteActionRequest) (r *interaction.DouyinFavoriteActionResponse, err error) {
	var _args interaction.InteractionServerFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServerFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteVideoIdList(ctx context.Context, req *interaction.DouyinGetFavoriteVideoIdListRequest) (r *interaction.DouyinGetFavoriteVideoIdListResponse, err error) {
	var _args interaction.InteractionServerGetFavoriteVideoIdListArgs
	_args.Req = req
	var _result interaction.InteractionServerGetFavoriteVideoIdListResult
	if err = p.c.Call(ctx, "GetFavoriteVideoIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteCount(ctx context.Context, req *interaction.DouyinGetFavoriteCountRequest) (r *interaction.DouyinGetFavoriteCountResponse, err error) {
	var _args interaction.InteractionServerGetFavoriteCountArgs
	_args.Req = req
	var _result interaction.InteractionServerGetFavoriteCountResult
	if err = p.c.Call(ctx, "GetFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetFavoriteCount(ctx context.Context, req *interaction.DouyinBatchGetFavoriteCountRequest) (r *interaction.DouyinBatchGetFavoriteCountResponse, err error) {
	var _args interaction.InteractionServerBatchGetFavoriteCountArgs
	_args.Req = req
	var _result interaction.InteractionServerBatchGetFavoriteCountResult
	if err = p.c.Call(ctx, "BatchGetFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *interaction.DouyinCommentActionRequest) (r *interaction.DouyinCommentActionResponse, err error) {
	var _args interaction.InteractionServerCommentArgs
	_args.Req = req
	var _result interaction.InteractionServerCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *interaction.DouyinGetCommentListRequest) (r *interaction.DouyinGetCommentListResponse, err error) {
	var _args interaction.InteractionServerGetCommentListArgs
	_args.Req = req
	var _result interaction.InteractionServerGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentCount(ctx context.Context, req *interaction.DouyinGetCommentCountRequest) (r *interaction.DouyinGetCommentCountResponse, err error) {
	var _args interaction.InteractionServerGetCommentCountArgs
	_args.Req = req
	var _result interaction.InteractionServerGetCommentCountResult
	if err = p.c.Call(ctx, "GetCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckFavorite(ctx context.Context, req *interaction.DouyinCheckFavoriteRequest) (r *interaction.DouyinCheckFavoriteResponse, err error) {
	var _args interaction.InteractionServerCheckFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServerCheckFavoriteResult
	if err = p.c.Call(ctx, "CheckFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetCommentCount(ctx context.Context, req *interaction.DouyinBatchGetCommentCountRequest) (r *interaction.DouyinBatchGetCommentCountResponse, err error) {
	var _args interaction.InteractionServerBatchGetCommentCountArgs
	_args.Req = req
	var _result interaction.InteractionServerBatchGetCommentCountResult
	if err = p.c.Call(ctx, "BatchGetCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchCheckFavorite(ctx context.Context, req *interaction.DouyinBatchCheckFavoriteRequest) (r *interaction.DouyinBatchCheckFavoriteResponse, err error) {
	var _args interaction.InteractionServerBatchCheckFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServerBatchCheckFavoriteResult
	if err = p.c.Call(ctx, "BatchCheckFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
