// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionserver

import (
	"context"
	interaction "github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/interaction"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServerServiceInfo
}

var interactionServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionServer"
	handlerType := (*interaction.InteractionServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"Favorite":      kitex.NewMethodInfo(favoriteHandler, newInteractionServerFavoriteArgs, newInteractionServerFavoriteResult, false),
		"FavoriteList":  kitex.NewMethodInfo(favoriteListHandler, newInteractionServerFavoriteListArgs, newInteractionServerFavoriteListResult, false),
		"FavoriteCount": kitex.NewMethodInfo(favoriteCountHandler, newInteractionServerFavoriteCountArgs, newInteractionServerFavoriteCountResult, false),
		"Comment":       kitex.NewMethodInfo(commentHandler, newInteractionServerCommentArgs, newInteractionServerCommentResult, false),
		"CommentList":   kitex.NewMethodInfo(commentListHandler, newInteractionServerCommentListArgs, newInteractionServerCommentListResult, false),
		"CommentCount":  kitex.NewMethodInfo(commentCountHandler, newInteractionServerCommentCountArgs, newInteractionServerCommentCountResult, false),
		"CheckFavorite": kitex.NewMethodInfo(checkFavoriteHandler, newInteractionServerCheckFavoriteArgs, newInteractionServerCheckFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerFavoriteArgs)
	realResult := result.(*interaction.InteractionServerFavoriteResult)
	success, err := handler.(interaction.InteractionServer).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerFavoriteArgs() interface{} {
	return interaction.NewInteractionServerFavoriteArgs()
}

func newInteractionServerFavoriteResult() interface{} {
	return interaction.NewInteractionServerFavoriteResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerFavoriteListArgs)
	realResult := result.(*interaction.InteractionServerFavoriteListResult)
	success, err := handler.(interaction.InteractionServer).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerFavoriteListArgs() interface{} {
	return interaction.NewInteractionServerFavoriteListArgs()
}

func newInteractionServerFavoriteListResult() interface{} {
	return interaction.NewInteractionServerFavoriteListResult()
}

func favoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerFavoriteCountArgs)
	realResult := result.(*interaction.InteractionServerFavoriteCountResult)
	success, err := handler.(interaction.InteractionServer).FavoriteCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerFavoriteCountArgs() interface{} {
	return interaction.NewInteractionServerFavoriteCountArgs()
}

func newInteractionServerFavoriteCountResult() interface{} {
	return interaction.NewInteractionServerFavoriteCountResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCommentArgs)
	realResult := result.(*interaction.InteractionServerCommentResult)
	success, err := handler.(interaction.InteractionServer).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCommentArgs() interface{} {
	return interaction.NewInteractionServerCommentArgs()
}

func newInteractionServerCommentResult() interface{} {
	return interaction.NewInteractionServerCommentResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCommentListArgs)
	realResult := result.(*interaction.InteractionServerCommentListResult)
	success, err := handler.(interaction.InteractionServer).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCommentListArgs() interface{} {
	return interaction.NewInteractionServerCommentListArgs()
}

func newInteractionServerCommentListResult() interface{} {
	return interaction.NewInteractionServerCommentListResult()
}

func commentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCommentCountArgs)
	realResult := result.(*interaction.InteractionServerCommentCountResult)
	success, err := handler.(interaction.InteractionServer).CommentCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCommentCountArgs() interface{} {
	return interaction.NewInteractionServerCommentCountArgs()
}

func newInteractionServerCommentCountResult() interface{} {
	return interaction.NewInteractionServerCommentCountResult()
}

func checkFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCheckFavoriteArgs)
	realResult := result.(*interaction.InteractionServerCheckFavoriteResult)
	success, err := handler.(interaction.InteractionServer).CheckFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCheckFavoriteArgs() interface{} {
	return interaction.NewInteractionServerCheckFavoriteArgs()
}

func newInteractionServerCheckFavoriteResult() interface{} {
	return interaction.NewInteractionServerCheckFavoriteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Favorite(ctx context.Context, req *interaction.DouyinFavoriteActionRequest) (r *interaction.DouyinFavoriteActionResponse, err error) {
	var _args interaction.InteractionServerFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServerFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *interaction.DouyinFavoriteListRequest) (r *interaction.DouyinFavoriteListResponse, err error) {
	var _args interaction.InteractionServerFavoriteListArgs
	_args.Req = req
	var _result interaction.InteractionServerFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteCount(ctx context.Context, req *interaction.DouyinFavoriteCountRequest) (r *interaction.DouyinFavoriteCountResponse, err error) {
	var _args interaction.InteractionServerFavoriteCountArgs
	_args.Req = req
	var _result interaction.InteractionServerFavoriteCountResult
	if err = p.c.Call(ctx, "FavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *interaction.DouyinCommentActionRequest) (r *interaction.DouyinCommentActionResponse, err error) {
	var _args interaction.InteractionServerCommentArgs
	_args.Req = req
	var _result interaction.InteractionServerCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *interaction.DouyinCommentListRequest) (r *interaction.DouyinCommentListResponse, err error) {
	var _args interaction.InteractionServerCommentListArgs
	_args.Req = req
	var _result interaction.InteractionServerCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentCount(ctx context.Context, req *interaction.DouyinCommentCountRequest) (r *interaction.DouyinCommentCountResponse, err error) {
	var _args interaction.InteractionServerCommentCountArgs
	_args.Req = req
	var _result interaction.InteractionServerCommentCountResult
	if err = p.c.Call(ctx, "CommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckFavorite(ctx context.Context, req *interaction.DouyinCheckFavoriteRequest) (r *interaction.DouyinCheckFavoriteResponse, err error) {
	var _args interaction.InteractionServerCheckFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServerCheckFavoriteResult
	if err = p.c.Call(ctx, "CheckFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
