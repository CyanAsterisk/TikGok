// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionserver

import (
	"context"
	interaction "github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/interaction"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServerServiceInfo
}

var interactionServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionServer"
	handlerType := (*interaction.InteractionServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"Favorite":               kitex.NewMethodInfo(favoriteHandler, newInteractionServerFavoriteArgs, newInteractionServerFavoriteResult, false),
		"GetFavoriteVideoIdList": kitex.NewMethodInfo(getFavoriteVideoIdListHandler, newInteractionServerGetFavoriteVideoIdListArgs, newInteractionServerGetFavoriteVideoIdListResult, false),
		"Comment":                kitex.NewMethodInfo(commentHandler, newInteractionServerCommentArgs, newInteractionServerCommentResult, false),
		"GetCommentList":         kitex.NewMethodInfo(getCommentListHandler, newInteractionServerGetCommentListArgs, newInteractionServerGetCommentListResult, false),
		"GetVideoInteractInfo":   kitex.NewMethodInfo(getVideoInteractInfoHandler, newInteractionServerGetVideoInteractInfoArgs, newInteractionServerGetVideoInteractInfoResult, false),
		"GetUserInteractInfo":    kitex.NewMethodInfo(getUserInteractInfoHandler, newInteractionServerGetUserInteractInfoArgs, newInteractionServerGetUserInteractInfoResult, false),
		"BatchGetInteractInfo":   kitex.NewMethodInfo(batchGetInteractInfoHandler, newInteractionServerBatchGetInteractInfoArgs, newInteractionServerBatchGetInteractInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerFavoriteArgs)
	realResult := result.(*interaction.InteractionServerFavoriteResult)
	success, err := handler.(interaction.InteractionServer).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerFavoriteArgs() interface{} {
	return interaction.NewInteractionServerFavoriteArgs()
}

func newInteractionServerFavoriteResult() interface{} {
	return interaction.NewInteractionServerFavoriteResult()
}

func getFavoriteVideoIdListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetFavoriteVideoIdListArgs)
	realResult := result.(*interaction.InteractionServerGetFavoriteVideoIdListResult)
	success, err := handler.(interaction.InteractionServer).GetFavoriteVideoIdList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetFavoriteVideoIdListArgs() interface{} {
	return interaction.NewInteractionServerGetFavoriteVideoIdListArgs()
}

func newInteractionServerGetFavoriteVideoIdListResult() interface{} {
	return interaction.NewInteractionServerGetFavoriteVideoIdListResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerCommentArgs)
	realResult := result.(*interaction.InteractionServerCommentResult)
	success, err := handler.(interaction.InteractionServer).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerCommentArgs() interface{} {
	return interaction.NewInteractionServerCommentArgs()
}

func newInteractionServerCommentResult() interface{} {
	return interaction.NewInteractionServerCommentResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetCommentListArgs)
	realResult := result.(*interaction.InteractionServerGetCommentListResult)
	success, err := handler.(interaction.InteractionServer).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetCommentListArgs() interface{} {
	return interaction.NewInteractionServerGetCommentListArgs()
}

func newInteractionServerGetCommentListResult() interface{} {
	return interaction.NewInteractionServerGetCommentListResult()
}

func getVideoInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetVideoInteractInfoArgs)
	realResult := result.(*interaction.InteractionServerGetVideoInteractInfoResult)
	success, err := handler.(interaction.InteractionServer).GetVideoInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetVideoInteractInfoArgs() interface{} {
	return interaction.NewInteractionServerGetVideoInteractInfoArgs()
}

func newInteractionServerGetVideoInteractInfoResult() interface{} {
	return interaction.NewInteractionServerGetVideoInteractInfoResult()
}

func getUserInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerGetUserInteractInfoArgs)
	realResult := result.(*interaction.InteractionServerGetUserInteractInfoResult)
	success, err := handler.(interaction.InteractionServer).GetUserInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerGetUserInteractInfoArgs() interface{} {
	return interaction.NewInteractionServerGetUserInteractInfoArgs()
}

func newInteractionServerGetUserInteractInfoResult() interface{} {
	return interaction.NewInteractionServerGetUserInteractInfoResult()
}

func batchGetInteractInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServerBatchGetInteractInfoArgs)
	realResult := result.(*interaction.InteractionServerBatchGetInteractInfoResult)
	success, err := handler.(interaction.InteractionServer).BatchGetInteractInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServerBatchGetInteractInfoArgs() interface{} {
	return interaction.NewInteractionServerBatchGetInteractInfoArgs()
}

func newInteractionServerBatchGetInteractInfoResult() interface{} {
	return interaction.NewInteractionServerBatchGetInteractInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Favorite(ctx context.Context, req *interaction.DouyinFavoriteActionRequest) (r *interaction.DouyinFavoriteActionResponse, err error) {
	var _args interaction.InteractionServerFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServerFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteVideoIdList(ctx context.Context, req *interaction.DouyinGetFavoriteVideoIdListRequest) (r *interaction.DouyinGetFavoriteVideoIdListResponse, err error) {
	var _args interaction.InteractionServerGetFavoriteVideoIdListArgs
	_args.Req = req
	var _result interaction.InteractionServerGetFavoriteVideoIdListResult
	if err = p.c.Call(ctx, "GetFavoriteVideoIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *interaction.DouyinCommentActionRequest) (r *interaction.DouyinCommentActionResponse, err error) {
	var _args interaction.InteractionServerCommentArgs
	_args.Req = req
	var _result interaction.InteractionServerCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *interaction.DouyinGetCommentListRequest) (r *interaction.DouyinGetCommentListResponse, err error) {
	var _args interaction.InteractionServerGetCommentListArgs
	_args.Req = req
	var _result interaction.InteractionServerGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInteractInfo(ctx context.Context, req *interaction.DouyinGetVideoInteractInfoRequest) (r *interaction.DouyinGetVideoInteractInfoResponse, err error) {
	var _args interaction.InteractionServerGetVideoInteractInfoArgs
	_args.Req = req
	var _result interaction.InteractionServerGetVideoInteractInfoResult
	if err = p.c.Call(ctx, "GetVideoInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInteractInfo(ctx context.Context, req *interaction.DouyinGetUserInteractInfoRequest) (r *interaction.DouyinGetUserInteractInfoResponse, err error) {
	var _args interaction.InteractionServerGetUserInteractInfoArgs
	_args.Req = req
	var _result interaction.InteractionServerGetUserInteractInfoResult
	if err = p.c.Call(ctx, "GetUserInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetInteractInfo(ctx context.Context, req *interaction.DouyinBatchGetInteractInfoRequest) (r *interaction.DouyinBatchGetInteractInfoResponse, err error) {
	var _args interaction.InteractionServerBatchGetInteractInfoArgs
	_args.Req = req
	var _result interaction.InteractionServerBatchGetInteractInfoResult
	if err = p.c.Call(ctx, "BatchGetInteractInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
