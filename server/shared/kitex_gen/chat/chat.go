// Code generated by thriftgo (0.2.5). DO NOT EDIT.

package chat

import (
	"context"
	"fmt"
	"github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/base"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type DouyinMessageGetChatHistoryRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserId int64 `thrift:"to_user_id,2" frugal:"2,default,i64" json:"to_user_id"`
}

func NewDouyinMessageGetChatHistoryRequest() *DouyinMessageGetChatHistoryRequest {
	return &DouyinMessageGetChatHistoryRequest{}
}

func (p *DouyinMessageGetChatHistoryRequest) InitDefault() {
	*p = DouyinMessageGetChatHistoryRequest{}
}

func (p *DouyinMessageGetChatHistoryRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DouyinMessageGetChatHistoryRequest) GetToUserId() (v int64) {
	return p.ToUserId
}
func (p *DouyinMessageGetChatHistoryRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DouyinMessageGetChatHistoryRequest) SetToUserId(val int64) {
	p.ToUserId = val
}

var fieldIDToName_DouyinMessageGetChatHistoryRequest = map[int16]string{
	1: "user_id",
	2: "to_user_id",
}

func (p *DouyinMessageGetChatHistoryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageGetChatHistoryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DouyinMessageGetChatHistoryRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToUserId = v
	}
	return nil
}

func (p *DouyinMessageGetChatHistoryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_get_chat_history_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageGetChatHistoryRequest(%+v)", *p)
}

func (p *DouyinMessageGetChatHistoryRequest) DeepEqual(ano *DouyinMessageGetChatHistoryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserId) {
		return false
	}
	return true
}

func (p *DouyinMessageGetChatHistoryRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DouyinMessageGetChatHistoryRequest) Field2DeepEqual(src int64) bool {

	if p.ToUserId != src {
		return false
	}
	return true
}

type DouyinMessageGetChatHistoryResponse struct {
	BaseResp    *base.DouyinBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.DouyinBaseResponse" json:"base_resp"`
	MessageList []*base.Message          `thrift:"message_list,2" frugal:"2,default,list<base.Message>" json:"message_list"`
}

func NewDouyinMessageGetChatHistoryResponse() *DouyinMessageGetChatHistoryResponse {
	return &DouyinMessageGetChatHistoryResponse{}
}

func (p *DouyinMessageGetChatHistoryResponse) InitDefault() {
	*p = DouyinMessageGetChatHistoryResponse{}
}

var DouyinMessageGetChatHistoryResponse_BaseResp_DEFAULT *base.DouyinBaseResponse

func (p *DouyinMessageGetChatHistoryResponse) GetBaseResp() (v *base.DouyinBaseResponse) {
	if !p.IsSetBaseResp() {
		return DouyinMessageGetChatHistoryResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *DouyinMessageGetChatHistoryResponse) GetMessageList() (v []*base.Message) {
	return p.MessageList
}
func (p *DouyinMessageGetChatHistoryResponse) SetBaseResp(val *base.DouyinBaseResponse) {
	p.BaseResp = val
}
func (p *DouyinMessageGetChatHistoryResponse) SetMessageList(val []*base.Message) {
	p.MessageList = val
}

var fieldIDToName_DouyinMessageGetChatHistoryResponse = map[int16]string{
	1: "base_resp",
	2: "message_list",
}

func (p *DouyinMessageGetChatHistoryResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinMessageGetChatHistoryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageGetChatHistoryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewDouyinBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageGetChatHistoryResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MessageList = make([]*base.Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewMessage()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MessageList = append(p.MessageList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageGetChatHistoryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_get_chat_history_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageList)); err != nil {
		return err
	}
	for _, v := range p.MessageList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageGetChatHistoryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageGetChatHistoryResponse(%+v)", *p)
}

func (p *DouyinMessageGetChatHistoryResponse) DeepEqual(ano *DouyinMessageGetChatHistoryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.MessageList) {
		return false
	}
	return true
}

func (p *DouyinMessageGetChatHistoryResponse) Field1DeepEqual(src *base.DouyinBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DouyinMessageGetChatHistoryResponse) Field2DeepEqual(src []*base.Message) bool {

	if len(p.MessageList) != len(src) {
		return false
	}
	for i, v := range p.MessageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DouyinMessageActionRequest struct {
	UserId     int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserId   int64  `thrift:"to_user_id,2" frugal:"2,default,i64" json:"to_user_id"`
	ActionType int8   `thrift:"action_type,3" frugal:"3,default,i8" json:"action_type"`
	Content    string `thrift:"content,4" frugal:"4,default,string" json:"content"`
}

func NewDouyinMessageActionRequest() *DouyinMessageActionRequest {
	return &DouyinMessageActionRequest{}
}

func (p *DouyinMessageActionRequest) InitDefault() {
	*p = DouyinMessageActionRequest{}
}

func (p *DouyinMessageActionRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DouyinMessageActionRequest) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *DouyinMessageActionRequest) GetActionType() (v int8) {
	return p.ActionType
}

func (p *DouyinMessageActionRequest) GetContent() (v string) {
	return p.Content
}
func (p *DouyinMessageActionRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DouyinMessageActionRequest) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *DouyinMessageActionRequest) SetActionType(val int8) {
	p.ActionType = val
}
func (p *DouyinMessageActionRequest) SetContent(val string) {
	p.Content = val
}

var fieldIDToName_DouyinMessageActionRequest = map[int16]string{
	1: "user_id",
	2: "to_user_id",
	3: "action_type",
	4: "content",
}

func (p *DouyinMessageActionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageActionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageActionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DouyinMessageActionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToUserId = v
	}
	return nil
}

func (p *DouyinMessageActionRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.ActionType = v
	}
	return nil
}

func (p *DouyinMessageActionRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *DouyinMessageActionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_action_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageActionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageActionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageActionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action_type", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.ActionType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DouyinMessageActionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DouyinMessageActionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageActionRequest(%+v)", *p)
}

func (p *DouyinMessageActionRequest) DeepEqual(ano *DouyinMessageActionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ActionType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *DouyinMessageActionRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DouyinMessageActionRequest) Field2DeepEqual(src int64) bool {

	if p.ToUserId != src {
		return false
	}
	return true
}
func (p *DouyinMessageActionRequest) Field3DeepEqual(src int8) bool {

	if p.ActionType != src {
		return false
	}
	return true
}
func (p *DouyinMessageActionRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

type DouyinMessageActionResponse struct {
	BaseResp *base.DouyinBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.DouyinBaseResponse" json:"base_resp"`
}

func NewDouyinMessageActionResponse() *DouyinMessageActionResponse {
	return &DouyinMessageActionResponse{}
}

func (p *DouyinMessageActionResponse) InitDefault() {
	*p = DouyinMessageActionResponse{}
}

var DouyinMessageActionResponse_BaseResp_DEFAULT *base.DouyinBaseResponse

func (p *DouyinMessageActionResponse) GetBaseResp() (v *base.DouyinBaseResponse) {
	if !p.IsSetBaseResp() {
		return DouyinMessageActionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DouyinMessageActionResponse) SetBaseResp(val *base.DouyinBaseResponse) {
	p.BaseResp = val
}

var fieldIDToName_DouyinMessageActionResponse = map[int16]string{
	1: "base_resp",
}

func (p *DouyinMessageActionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinMessageActionResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageActionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageActionResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewDouyinBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageActionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_action_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageActionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageActionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageActionResponse(%+v)", *p)
}

func (p *DouyinMessageActionResponse) DeepEqual(ano *DouyinMessageActionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DouyinMessageActionResponse) Field1DeepEqual(src *base.DouyinBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DouyinMessageGetLatestRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserId int64 `thrift:"to_user_id,2" frugal:"2,default,i64" json:"to_user_id"`
}

func NewDouyinMessageGetLatestRequest() *DouyinMessageGetLatestRequest {
	return &DouyinMessageGetLatestRequest{}
}

func (p *DouyinMessageGetLatestRequest) InitDefault() {
	*p = DouyinMessageGetLatestRequest{}
}

func (p *DouyinMessageGetLatestRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DouyinMessageGetLatestRequest) GetToUserId() (v int64) {
	return p.ToUserId
}
func (p *DouyinMessageGetLatestRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DouyinMessageGetLatestRequest) SetToUserId(val int64) {
	p.ToUserId = val
}

var fieldIDToName_DouyinMessageGetLatestRequest = map[int16]string{
	1: "user_id",
	2: "to_user_id",
}

func (p *DouyinMessageGetLatestRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageGetLatestRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageGetLatestRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DouyinMessageGetLatestRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToUserId = v
	}
	return nil
}

func (p *DouyinMessageGetLatestRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_get_latest_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageGetLatestRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageGetLatestRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageGetLatestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageGetLatestRequest(%+v)", *p)
}

func (p *DouyinMessageGetLatestRequest) DeepEqual(ano *DouyinMessageGetLatestRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserId) {
		return false
	}
	return true
}

func (p *DouyinMessageGetLatestRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DouyinMessageGetLatestRequest) Field2DeepEqual(src int64) bool {

	if p.ToUserId != src {
		return false
	}
	return true
}

type DouyinMessageGetLatestResponse struct {
	BaseResp  *base.DouyinBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.DouyinBaseResponse" json:"base_resp"`
	LatestMsg *base.LatestMsg          `thrift:"latest_msg,2" frugal:"2,default,base.LatestMsg" json:"latest_msg"`
}

func NewDouyinMessageGetLatestResponse() *DouyinMessageGetLatestResponse {
	return &DouyinMessageGetLatestResponse{}
}

func (p *DouyinMessageGetLatestResponse) InitDefault() {
	*p = DouyinMessageGetLatestResponse{}
}

var DouyinMessageGetLatestResponse_BaseResp_DEFAULT *base.DouyinBaseResponse

func (p *DouyinMessageGetLatestResponse) GetBaseResp() (v *base.DouyinBaseResponse) {
	if !p.IsSetBaseResp() {
		return DouyinMessageGetLatestResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var DouyinMessageGetLatestResponse_LatestMsg_DEFAULT *base.LatestMsg

func (p *DouyinMessageGetLatestResponse) GetLatestMsg() (v *base.LatestMsg) {
	if !p.IsSetLatestMsg() {
		return DouyinMessageGetLatestResponse_LatestMsg_DEFAULT
	}
	return p.LatestMsg
}
func (p *DouyinMessageGetLatestResponse) SetBaseResp(val *base.DouyinBaseResponse) {
	p.BaseResp = val
}
func (p *DouyinMessageGetLatestResponse) SetLatestMsg(val *base.LatestMsg) {
	p.LatestMsg = val
}

var fieldIDToName_DouyinMessageGetLatestResponse = map[int16]string{
	1: "base_resp",
	2: "latest_msg",
}

func (p *DouyinMessageGetLatestResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinMessageGetLatestResponse) IsSetLatestMsg() bool {
	return p.LatestMsg != nil
}

func (p *DouyinMessageGetLatestResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageGetLatestResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageGetLatestResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewDouyinBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageGetLatestResponse) ReadField2(iprot thrift.TProtocol) error {
	p.LatestMsg = base.NewLatestMsg()
	if err := p.LatestMsg.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageGetLatestResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_get_latest_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageGetLatestResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageGetLatestResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("latest_msg", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LatestMsg.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageGetLatestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageGetLatestResponse(%+v)", *p)
}

func (p *DouyinMessageGetLatestResponse) DeepEqual(ano *DouyinMessageGetLatestResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.LatestMsg) {
		return false
	}
	return true
}

func (p *DouyinMessageGetLatestResponse) Field1DeepEqual(src *base.DouyinBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DouyinMessageGetLatestResponse) Field2DeepEqual(src *base.LatestMsg) bool {

	if !p.LatestMsg.DeepEqual(src) {
		return false
	}
	return true
}

type DouyinMessageBatchGetLatestRequest struct {
	UserId       int64   `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserIdList []int64 `thrift:"to_user_id_list,2" frugal:"2,default,list<i64>" json:"to_user_id_list"`
}

func NewDouyinMessageBatchGetLatestRequest() *DouyinMessageBatchGetLatestRequest {
	return &DouyinMessageBatchGetLatestRequest{}
}

func (p *DouyinMessageBatchGetLatestRequest) InitDefault() {
	*p = DouyinMessageBatchGetLatestRequest{}
}

func (p *DouyinMessageBatchGetLatestRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DouyinMessageBatchGetLatestRequest) GetToUserIdList() (v []int64) {
	return p.ToUserIdList
}
func (p *DouyinMessageBatchGetLatestRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DouyinMessageBatchGetLatestRequest) SetToUserIdList(val []int64) {
	p.ToUserIdList = val
}

var fieldIDToName_DouyinMessageBatchGetLatestRequest = map[int16]string{
	1: "user_id",
	2: "to_user_id_list",
}

func (p *DouyinMessageBatchGetLatestRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageBatchGetLatestRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DouyinMessageBatchGetLatestRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ToUserIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ToUserIdList = append(p.ToUserIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageBatchGetLatestRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_batch_get_latest_request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ToUserIdList)); err != nil {
		return err
	}
	for _, v := range p.ToUserIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageBatchGetLatestRequest(%+v)", *p)
}

func (p *DouyinMessageBatchGetLatestRequest) DeepEqual(ano *DouyinMessageBatchGetLatestRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserIdList) {
		return false
	}
	return true
}

func (p *DouyinMessageBatchGetLatestRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DouyinMessageBatchGetLatestRequest) Field2DeepEqual(src []int64) bool {

	if len(p.ToUserIdList) != len(src) {
		return false
	}
	for i, v := range p.ToUserIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DouyinMessageBatchGetLatestResponse struct {
	BaseResp      *base.DouyinBaseResponse `thrift:"base_resp,1" frugal:"1,default,base.DouyinBaseResponse" json:"base_resp"`
	LatestMsgList []*base.LatestMsg        `thrift:"latest_msg_list,2" frugal:"2,default,list<base.LatestMsg>" json:"latest_msg_list"`
}

func NewDouyinMessageBatchGetLatestResponse() *DouyinMessageBatchGetLatestResponse {
	return &DouyinMessageBatchGetLatestResponse{}
}

func (p *DouyinMessageBatchGetLatestResponse) InitDefault() {
	*p = DouyinMessageBatchGetLatestResponse{}
}

var DouyinMessageBatchGetLatestResponse_BaseResp_DEFAULT *base.DouyinBaseResponse

func (p *DouyinMessageBatchGetLatestResponse) GetBaseResp() (v *base.DouyinBaseResponse) {
	if !p.IsSetBaseResp() {
		return DouyinMessageBatchGetLatestResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *DouyinMessageBatchGetLatestResponse) GetLatestMsgList() (v []*base.LatestMsg) {
	return p.LatestMsgList
}
func (p *DouyinMessageBatchGetLatestResponse) SetBaseResp(val *base.DouyinBaseResponse) {
	p.BaseResp = val
}
func (p *DouyinMessageBatchGetLatestResponse) SetLatestMsgList(val []*base.LatestMsg) {
	p.LatestMsgList = val
}

var fieldIDToName_DouyinMessageBatchGetLatestResponse = map[int16]string{
	1: "base_resp",
	2: "latest_msg_list",
}

func (p *DouyinMessageBatchGetLatestResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinMessageBatchGetLatestResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DouyinMessageBatchGetLatestResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestResponse) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewDouyinBaseResponse()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageBatchGetLatestResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LatestMsgList = make([]*base.LatestMsg, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewLatestMsg()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.LatestMsgList = append(p.LatestMsgList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DouyinMessageBatchGetLatestResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("douyin_message_batch_get_latest_response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("latest_msg_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LatestMsgList)); err != nil {
		return err
	}
	for _, v := range p.LatestMsgList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DouyinMessageBatchGetLatestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinMessageBatchGetLatestResponse(%+v)", *p)
}

func (p *DouyinMessageBatchGetLatestResponse) DeepEqual(ano *DouyinMessageBatchGetLatestResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.LatestMsgList) {
		return false
	}
	return true
}

func (p *DouyinMessageBatchGetLatestResponse) Field1DeepEqual(src *base.DouyinBaseResponse) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DouyinMessageBatchGetLatestResponse) Field2DeepEqual(src []*base.LatestMsg) bool {

	if len(p.LatestMsgList) != len(src) {
		return false
	}
	for i, v := range p.LatestMsgList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ChatService interface {
	GetChatHistory(ctx context.Context, req *DouyinMessageGetChatHistoryRequest) (r *DouyinMessageGetChatHistoryResponse, err error)

	SentMessage(ctx context.Context, req *DouyinMessageActionRequest) (r *DouyinMessageActionResponse, err error)

	GetLatestMessage(ctx context.Context, req *DouyinMessageGetLatestRequest) (r *DouyinMessageGetLatestResponse, err error)

	BatchGetLatestMessage(ctx context.Context, req *DouyinMessageBatchGetLatestRequest) (r *DouyinMessageBatchGetLatestResponse, err error)
}

type ChatServiceClient struct {
	c thrift.TClient
}

func NewChatServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ChatServiceClient {
	return &ChatServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewChatServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ChatServiceClient {
	return &ChatServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewChatServiceClient(c thrift.TClient) *ChatServiceClient {
	return &ChatServiceClient{
		c: c,
	}
}

func (p *ChatServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ChatServiceClient) GetChatHistory(ctx context.Context, req *DouyinMessageGetChatHistoryRequest) (r *DouyinMessageGetChatHistoryResponse, err error) {
	var _args ChatServiceGetChatHistoryArgs
	_args.Req = req
	var _result ChatServiceGetChatHistoryResult
	if err = p.Client_().Call(ctx, "GetChatHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ChatServiceClient) SentMessage(ctx context.Context, req *DouyinMessageActionRequest) (r *DouyinMessageActionResponse, err error) {
	var _args ChatServiceSentMessageArgs
	_args.Req = req
	var _result ChatServiceSentMessageResult
	if err = p.Client_().Call(ctx, "SentMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ChatServiceClient) GetLatestMessage(ctx context.Context, req *DouyinMessageGetLatestRequest) (r *DouyinMessageGetLatestResponse, err error) {
	var _args ChatServiceGetLatestMessageArgs
	_args.Req = req
	var _result ChatServiceGetLatestMessageResult
	if err = p.Client_().Call(ctx, "GetLatestMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ChatServiceClient) BatchGetLatestMessage(ctx context.Context, req *DouyinMessageBatchGetLatestRequest) (r *DouyinMessageBatchGetLatestResponse, err error) {
	var _args ChatServiceBatchGetLatestMessageArgs
	_args.Req = req
	var _result ChatServiceBatchGetLatestMessageResult
	if err = p.Client_().Call(ctx, "BatchGetLatestMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ChatServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ChatService
}

func (p *ChatServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ChatServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ChatServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewChatServiceProcessor(handler ChatService) *ChatServiceProcessor {
	self := &ChatServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetChatHistory", &chatServiceProcessorGetChatHistory{handler: handler})
	self.AddToProcessorMap("SentMessage", &chatServiceProcessorSentMessage{handler: handler})
	self.AddToProcessorMap("GetLatestMessage", &chatServiceProcessorGetLatestMessage{handler: handler})
	self.AddToProcessorMap("BatchGetLatestMessage", &chatServiceProcessorBatchGetLatestMessage{handler: handler})
	return self
}
func (p *ChatServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type chatServiceProcessorGetChatHistory struct {
	handler ChatService
}

func (p *chatServiceProcessorGetChatHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatServiceGetChatHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetChatHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatServiceGetChatHistoryResult{}
	var retval *DouyinMessageGetChatHistoryResponse
	if retval, err2 = p.handler.GetChatHistory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChatHistory: "+err2.Error())
		oprot.WriteMessageBegin("GetChatHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetChatHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type chatServiceProcessorSentMessage struct {
	handler ChatService
}

func (p *chatServiceProcessorSentMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatServiceSentMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SentMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatServiceSentMessageResult{}
	var retval *DouyinMessageActionResponse
	if retval, err2 = p.handler.SentMessage(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SentMessage: "+err2.Error())
		oprot.WriteMessageBegin("SentMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SentMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type chatServiceProcessorGetLatestMessage struct {
	handler ChatService
}

func (p *chatServiceProcessorGetLatestMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatServiceGetLatestMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLatestMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatServiceGetLatestMessageResult{}
	var retval *DouyinMessageGetLatestResponse
	if retval, err2 = p.handler.GetLatestMessage(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLatestMessage: "+err2.Error())
		oprot.WriteMessageBegin("GetLatestMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLatestMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type chatServiceProcessorBatchGetLatestMessage struct {
	handler ChatService
}

func (p *chatServiceProcessorBatchGetLatestMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChatServiceBatchGetLatestMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetLatestMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ChatServiceBatchGetLatestMessageResult{}
	var retval *DouyinMessageBatchGetLatestResponse
	if retval, err2 = p.handler.BatchGetLatestMessage(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetLatestMessage: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetLatestMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetLatestMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ChatServiceGetChatHistoryArgs struct {
	Req *DouyinMessageGetChatHistoryRequest `thrift:"req,1" frugal:"1,default,DouyinMessageGetChatHistoryRequest" json:"req"`
}

func NewChatServiceGetChatHistoryArgs() *ChatServiceGetChatHistoryArgs {
	return &ChatServiceGetChatHistoryArgs{}
}

func (p *ChatServiceGetChatHistoryArgs) InitDefault() {
	*p = ChatServiceGetChatHistoryArgs{}
}

var ChatServiceGetChatHistoryArgs_Req_DEFAULT *DouyinMessageGetChatHistoryRequest

func (p *ChatServiceGetChatHistoryArgs) GetReq() (v *DouyinMessageGetChatHistoryRequest) {
	if !p.IsSetReq() {
		return ChatServiceGetChatHistoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceGetChatHistoryArgs) SetReq(val *DouyinMessageGetChatHistoryRequest) {
	p.Req = val
}

var fieldIDToName_ChatServiceGetChatHistoryArgs = map[int16]string{
	1: "req",
}

func (p *ChatServiceGetChatHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceGetChatHistoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceGetChatHistoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceGetChatHistoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDouyinMessageGetChatHistoryRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceGetChatHistoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatHistory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceGetChatHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatServiceGetChatHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceGetChatHistoryArgs(%+v)", *p)
}

func (p *ChatServiceGetChatHistoryArgs) DeepEqual(ano *ChatServiceGetChatHistoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatServiceGetChatHistoryArgs) Field1DeepEqual(src *DouyinMessageGetChatHistoryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceGetChatHistoryResult struct {
	Success *DouyinMessageGetChatHistoryResponse `thrift:"success,0,optional" frugal:"0,optional,DouyinMessageGetChatHistoryResponse" json:"success,omitempty"`
}

func NewChatServiceGetChatHistoryResult() *ChatServiceGetChatHistoryResult {
	return &ChatServiceGetChatHistoryResult{}
}

func (p *ChatServiceGetChatHistoryResult) InitDefault() {
	*p = ChatServiceGetChatHistoryResult{}
}

var ChatServiceGetChatHistoryResult_Success_DEFAULT *DouyinMessageGetChatHistoryResponse

func (p *ChatServiceGetChatHistoryResult) GetSuccess() (v *DouyinMessageGetChatHistoryResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceGetChatHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceGetChatHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*DouyinMessageGetChatHistoryResponse)
}

var fieldIDToName_ChatServiceGetChatHistoryResult = map[int16]string{
	0: "success",
}

func (p *ChatServiceGetChatHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceGetChatHistoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceGetChatHistoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceGetChatHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDouyinMessageGetChatHistoryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceGetChatHistoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatHistory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceGetChatHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatServiceGetChatHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceGetChatHistoryResult(%+v)", *p)
}

func (p *ChatServiceGetChatHistoryResult) DeepEqual(ano *ChatServiceGetChatHistoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatServiceGetChatHistoryResult) Field0DeepEqual(src *DouyinMessageGetChatHistoryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceSentMessageArgs struct {
	Req *DouyinMessageActionRequest `thrift:"req,1" frugal:"1,default,DouyinMessageActionRequest" json:"req"`
}

func NewChatServiceSentMessageArgs() *ChatServiceSentMessageArgs {
	return &ChatServiceSentMessageArgs{}
}

func (p *ChatServiceSentMessageArgs) InitDefault() {
	*p = ChatServiceSentMessageArgs{}
}

var ChatServiceSentMessageArgs_Req_DEFAULT *DouyinMessageActionRequest

func (p *ChatServiceSentMessageArgs) GetReq() (v *DouyinMessageActionRequest) {
	if !p.IsSetReq() {
		return ChatServiceSentMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceSentMessageArgs) SetReq(val *DouyinMessageActionRequest) {
	p.Req = val
}

var fieldIDToName_ChatServiceSentMessageArgs = map[int16]string{
	1: "req",
}

func (p *ChatServiceSentMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceSentMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceSentMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceSentMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDouyinMessageActionRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceSentMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SentMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceSentMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatServiceSentMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceSentMessageArgs(%+v)", *p)
}

func (p *ChatServiceSentMessageArgs) DeepEqual(ano *ChatServiceSentMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatServiceSentMessageArgs) Field1DeepEqual(src *DouyinMessageActionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceSentMessageResult struct {
	Success *DouyinMessageActionResponse `thrift:"success,0,optional" frugal:"0,optional,DouyinMessageActionResponse" json:"success,omitempty"`
}

func NewChatServiceSentMessageResult() *ChatServiceSentMessageResult {
	return &ChatServiceSentMessageResult{}
}

func (p *ChatServiceSentMessageResult) InitDefault() {
	*p = ChatServiceSentMessageResult{}
}

var ChatServiceSentMessageResult_Success_DEFAULT *DouyinMessageActionResponse

func (p *ChatServiceSentMessageResult) GetSuccess() (v *DouyinMessageActionResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceSentMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceSentMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DouyinMessageActionResponse)
}

var fieldIDToName_ChatServiceSentMessageResult = map[int16]string{
	0: "success",
}

func (p *ChatServiceSentMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceSentMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceSentMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceSentMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDouyinMessageActionResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceSentMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SentMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceSentMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatServiceSentMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceSentMessageResult(%+v)", *p)
}

func (p *ChatServiceSentMessageResult) DeepEqual(ano *ChatServiceSentMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatServiceSentMessageResult) Field0DeepEqual(src *DouyinMessageActionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceGetLatestMessageArgs struct {
	Req *DouyinMessageGetLatestRequest `thrift:"req,1" frugal:"1,default,DouyinMessageGetLatestRequest" json:"req"`
}

func NewChatServiceGetLatestMessageArgs() *ChatServiceGetLatestMessageArgs {
	return &ChatServiceGetLatestMessageArgs{}
}

func (p *ChatServiceGetLatestMessageArgs) InitDefault() {
	*p = ChatServiceGetLatestMessageArgs{}
}

var ChatServiceGetLatestMessageArgs_Req_DEFAULT *DouyinMessageGetLatestRequest

func (p *ChatServiceGetLatestMessageArgs) GetReq() (v *DouyinMessageGetLatestRequest) {
	if !p.IsSetReq() {
		return ChatServiceGetLatestMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceGetLatestMessageArgs) SetReq(val *DouyinMessageGetLatestRequest) {
	p.Req = val
}

var fieldIDToName_ChatServiceGetLatestMessageArgs = map[int16]string{
	1: "req",
}

func (p *ChatServiceGetLatestMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceGetLatestMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceGetLatestMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceGetLatestMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDouyinMessageGetLatestRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceGetLatestMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLatestMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceGetLatestMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatServiceGetLatestMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceGetLatestMessageArgs(%+v)", *p)
}

func (p *ChatServiceGetLatestMessageArgs) DeepEqual(ano *ChatServiceGetLatestMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatServiceGetLatestMessageArgs) Field1DeepEqual(src *DouyinMessageGetLatestRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceGetLatestMessageResult struct {
	Success *DouyinMessageGetLatestResponse `thrift:"success,0,optional" frugal:"0,optional,DouyinMessageGetLatestResponse" json:"success,omitempty"`
}

func NewChatServiceGetLatestMessageResult() *ChatServiceGetLatestMessageResult {
	return &ChatServiceGetLatestMessageResult{}
}

func (p *ChatServiceGetLatestMessageResult) InitDefault() {
	*p = ChatServiceGetLatestMessageResult{}
}

var ChatServiceGetLatestMessageResult_Success_DEFAULT *DouyinMessageGetLatestResponse

func (p *ChatServiceGetLatestMessageResult) GetSuccess() (v *DouyinMessageGetLatestResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceGetLatestMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceGetLatestMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DouyinMessageGetLatestResponse)
}

var fieldIDToName_ChatServiceGetLatestMessageResult = map[int16]string{
	0: "success",
}

func (p *ChatServiceGetLatestMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceGetLatestMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceGetLatestMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceGetLatestMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDouyinMessageGetLatestResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceGetLatestMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLatestMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceGetLatestMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatServiceGetLatestMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceGetLatestMessageResult(%+v)", *p)
}

func (p *ChatServiceGetLatestMessageResult) DeepEqual(ano *ChatServiceGetLatestMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatServiceGetLatestMessageResult) Field0DeepEqual(src *DouyinMessageGetLatestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceBatchGetLatestMessageArgs struct {
	Req *DouyinMessageBatchGetLatestRequest `thrift:"req,1" frugal:"1,default,DouyinMessageBatchGetLatestRequest" json:"req"`
}

func NewChatServiceBatchGetLatestMessageArgs() *ChatServiceBatchGetLatestMessageArgs {
	return &ChatServiceBatchGetLatestMessageArgs{}
}

func (p *ChatServiceBatchGetLatestMessageArgs) InitDefault() {
	*p = ChatServiceBatchGetLatestMessageArgs{}
}

var ChatServiceBatchGetLatestMessageArgs_Req_DEFAULT *DouyinMessageBatchGetLatestRequest

func (p *ChatServiceBatchGetLatestMessageArgs) GetReq() (v *DouyinMessageBatchGetLatestRequest) {
	if !p.IsSetReq() {
		return ChatServiceBatchGetLatestMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceBatchGetLatestMessageArgs) SetReq(val *DouyinMessageBatchGetLatestRequest) {
	p.Req = val
}

var fieldIDToName_ChatServiceBatchGetLatestMessageArgs = map[int16]string{
	1: "req",
}

func (p *ChatServiceBatchGetLatestMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceBatchGetLatestMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceBatchGetLatestMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceBatchGetLatestMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDouyinMessageBatchGetLatestRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceBatchGetLatestMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetLatestMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceBatchGetLatestMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatServiceBatchGetLatestMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceBatchGetLatestMessageArgs(%+v)", *p)
}

func (p *ChatServiceBatchGetLatestMessageArgs) DeepEqual(ano *ChatServiceBatchGetLatestMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatServiceBatchGetLatestMessageArgs) Field1DeepEqual(src *DouyinMessageBatchGetLatestRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ChatServiceBatchGetLatestMessageResult struct {
	Success *DouyinMessageBatchGetLatestResponse `thrift:"success,0,optional" frugal:"0,optional,DouyinMessageBatchGetLatestResponse" json:"success,omitempty"`
}

func NewChatServiceBatchGetLatestMessageResult() *ChatServiceBatchGetLatestMessageResult {
	return &ChatServiceBatchGetLatestMessageResult{}
}

func (p *ChatServiceBatchGetLatestMessageResult) InitDefault() {
	*p = ChatServiceBatchGetLatestMessageResult{}
}

var ChatServiceBatchGetLatestMessageResult_Success_DEFAULT *DouyinMessageBatchGetLatestResponse

func (p *ChatServiceBatchGetLatestMessageResult) GetSuccess() (v *DouyinMessageBatchGetLatestResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceBatchGetLatestMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceBatchGetLatestMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DouyinMessageBatchGetLatestResponse)
}

var fieldIDToName_ChatServiceBatchGetLatestMessageResult = map[int16]string{
	0: "success",
}

func (p *ChatServiceBatchGetLatestMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceBatchGetLatestMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatServiceBatchGetLatestMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatServiceBatchGetLatestMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDouyinMessageBatchGetLatestResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChatServiceBatchGetLatestMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetLatestMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatServiceBatchGetLatestMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ChatServiceBatchGetLatestMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceBatchGetLatestMessageResult(%+v)", *p)
}

func (p *ChatServiceBatchGetLatestMessageResult) DeepEqual(ano *ChatServiceBatchGetLatestMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatServiceBatchGetLatestMessageResult) Field0DeepEqual(src *DouyinMessageBatchGetLatestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
