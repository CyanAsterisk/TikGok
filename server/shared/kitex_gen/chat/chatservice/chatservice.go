// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatservice

import (
	"context"
	chat "github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/chat"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ChatHistory":   kitex.NewMethodInfo(chatHistoryHandler, newChatServiceChatHistoryArgs, newChatServiceChatHistoryResult, false),
		"SentMessage":   kitex.NewMethodInfo(sentMessageHandler, newChatServiceSentMessageArgs, newChatServiceSentMessageResult, false),
		"LatestMessage": kitex.NewMethodInfo(latestMessageHandler, newChatServiceLatestMessageArgs, newChatServiceLatestMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func chatHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceChatHistoryArgs)
	realResult := result.(*chat.ChatServiceChatHistoryResult)
	success, err := handler.(chat.ChatService).ChatHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceChatHistoryArgs() interface{} {
	return chat.NewChatServiceChatHistoryArgs()
}

func newChatServiceChatHistoryResult() interface{} {
	return chat.NewChatServiceChatHistoryResult()
}

func sentMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceSentMessageArgs)
	realResult := result.(*chat.ChatServiceSentMessageResult)
	success, err := handler.(chat.ChatService).SentMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceSentMessageArgs() interface{} {
	return chat.NewChatServiceSentMessageArgs()
}

func newChatServiceSentMessageResult() interface{} {
	return chat.NewChatServiceSentMessageResult()
}

func latestMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceLatestMessageArgs)
	realResult := result.(*chat.ChatServiceLatestMessageResult)
	success, err := handler.(chat.ChatService).LatestMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceLatestMessageArgs() interface{} {
	return chat.NewChatServiceLatestMessageArgs()
}

func newChatServiceLatestMessageResult() interface{} {
	return chat.NewChatServiceLatestMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ChatHistory(ctx context.Context, req *chat.DouyinMessageChatRequest) (r *chat.DouyinMessageChatResponse, err error) {
	var _args chat.ChatServiceChatHistoryArgs
	_args.Req = req
	var _result chat.ChatServiceChatHistoryResult
	if err = p.c.Call(ctx, "ChatHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SentMessage(ctx context.Context, req *chat.DouyinMessageActionRequest) (r *chat.DouyinMessageActionResponse, err error) {
	var _args chat.ChatServiceSentMessageArgs
	_args.Req = req
	var _result chat.ChatServiceSentMessageResult
	if err = p.c.Call(ctx, "SentMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LatestMessage(ctx context.Context, req *chat.DouyinMessageLatestRequest) (r *chat.DouyinMessageLatestResponse, err error) {
	var _args chat.ChatServiceLatestMessageArgs
	_args.Req = req
	var _result chat.ChatServiceLatestMessageResult
	if err = p.c.Call(ctx, "LatestMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
