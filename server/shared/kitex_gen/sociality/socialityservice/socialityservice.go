// Code generated by Kitex v0.4.4. DO NOT EDIT.

package socialityservice

import (
	"context"
	sociality "github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/sociality"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return socialityServiceServiceInfo
}

var socialityServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocialityService"
	handlerType := (*sociality.SocialityService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action":        kitex.NewMethodInfo(actionHandler, newSocialityServiceActionArgs, newSocialityServiceActionResult, false),
		"FollowingList": kitex.NewMethodInfo(followingListHandler, newSocialityServiceFollowingListArgs, newSocialityServiceFollowingListResult, false),
		"FollowerList":  kitex.NewMethodInfo(followerListHandler, newSocialityServiceFollowerListArgs, newSocialityServiceFollowerListResult, false),
		"FriendList":    kitex.NewMethodInfo(friendListHandler, newSocialityServiceFriendListArgs, newSocialityServiceFriendListResult, false),
		"ChatHistory":   kitex.NewMethodInfo(chatHistoryHandler, newSocialityServiceChatHistoryArgs, newSocialityServiceChatHistoryResult, false),
		"SentMessage":   kitex.NewMethodInfo(sentMessageHandler, newSocialityServiceSentMessageArgs, newSocialityServiceSentMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "sociality",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceActionArgs)
	realResult := result.(*sociality.SocialityServiceActionResult)
	success, err := handler.(sociality.SocialityService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceActionArgs() interface{} {
	return sociality.NewSocialityServiceActionArgs()
}

func newSocialityServiceActionResult() interface{} {
	return sociality.NewSocialityServiceActionResult()
}

func followingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceFollowingListArgs)
	realResult := result.(*sociality.SocialityServiceFollowingListResult)
	success, err := handler.(sociality.SocialityService).FollowingList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceFollowingListArgs() interface{} {
	return sociality.NewSocialityServiceFollowingListArgs()
}

func newSocialityServiceFollowingListResult() interface{} {
	return sociality.NewSocialityServiceFollowingListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceFollowerListArgs)
	realResult := result.(*sociality.SocialityServiceFollowerListResult)
	success, err := handler.(sociality.SocialityService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceFollowerListArgs() interface{} {
	return sociality.NewSocialityServiceFollowerListArgs()
}

func newSocialityServiceFollowerListResult() interface{} {
	return sociality.NewSocialityServiceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceFriendListArgs)
	realResult := result.(*sociality.SocialityServiceFriendListResult)
	success, err := handler.(sociality.SocialityService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceFriendListArgs() interface{} {
	return sociality.NewSocialityServiceFriendListArgs()
}

func newSocialityServiceFriendListResult() interface{} {
	return sociality.NewSocialityServiceFriendListResult()
}

func chatHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceChatHistoryArgs)
	realResult := result.(*sociality.SocialityServiceChatHistoryResult)
	success, err := handler.(sociality.SocialityService).ChatHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceChatHistoryArgs() interface{} {
	return sociality.NewSocialityServiceChatHistoryArgs()
}

func newSocialityServiceChatHistoryResult() interface{} {
	return sociality.NewSocialityServiceChatHistoryResult()
}

func sentMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceSentMessageArgs)
	realResult := result.(*sociality.SocialityServiceSentMessageResult)
	success, err := handler.(sociality.SocialityService).SentMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceSentMessageArgs() interface{} {
	return sociality.NewSocialityServiceSentMessageArgs()
}

func newSocialityServiceSentMessageResult() interface{} {
	return sociality.NewSocialityServiceSentMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *sociality.DouyinRelationActionRequest) (r *sociality.DouyinRelationActionResponse, err error) {
	var _args sociality.SocialityServiceActionArgs
	_args.Req = req
	var _result sociality.SocialityServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowingList(ctx context.Context, req *sociality.DouyinRelationFollowListRequest) (r *sociality.DouyinRelationFollowListResponse, err error) {
	var _args sociality.SocialityServiceFollowingListArgs
	_args.Req = req
	var _result sociality.SocialityServiceFollowingListResult
	if err = p.c.Call(ctx, "FollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *sociality.DouyinRelationFollowerListRequest) (r *sociality.DouyinRelationFollowerListResponse, err error) {
	var _args sociality.SocialityServiceFollowerListArgs
	_args.Req = req
	var _result sociality.SocialityServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *sociality.DouyinRelationFriendListRequest) (r *sociality.DouyinRelationFriendListResponse, err error) {
	var _args sociality.SocialityServiceFriendListArgs
	_args.Req = req
	var _result sociality.SocialityServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChatHistory(ctx context.Context, req *sociality.DouyinMessageChatRequest) (r *sociality.DouyinMessageChatResponse, err error) {
	var _args sociality.SocialityServiceChatHistoryArgs
	_args.Req = req
	var _result sociality.SocialityServiceChatHistoryResult
	if err = p.c.Call(ctx, "ChatHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SentMessage(ctx context.Context, req *sociality.DouyinMessageActionRequest) (r *sociality.DouyinMessageActionResponse, err error) {
	var _args sociality.SocialityServiceSentMessageArgs
	_args.Req = req
	var _result sociality.SocialityServiceSentMessageResult
	if err = p.c.Call(ctx, "SentMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
