// Code generated by Kitex v0.4.4. DO NOT EDIT.

package socialityservice

import (
	"context"
	sociality "github.com/CyanAsterisk/TikGok/server/shared/kitex_gen/sociality"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return socialityServiceServiceInfo
}

var socialityServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocialityService"
	handlerType := (*sociality.SocialityService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action":                 kitex.NewMethodInfo(actionHandler, newSocialityServiceActionArgs, newSocialityServiceActionResult, false),
		"GetFollowingList":       kitex.NewMethodInfo(getFollowingListHandler, newSocialityServiceGetFollowingListArgs, newSocialityServiceGetFollowingListResult, false),
		"GetFollowerList":        kitex.NewMethodInfo(getFollowerListHandler, newSocialityServiceGetFollowerListArgs, newSocialityServiceGetFollowerListResult, false),
		"GetFriendList":          kitex.NewMethodInfo(getFriendListHandler, newSocialityServiceGetFriendListArgs, newSocialityServiceGetFriendListResult, false),
		"CheckFollow":            kitex.NewMethodInfo(checkFollowHandler, newSocialityServiceCheckFollowArgs, newSocialityServiceCheckFollowResult, false),
		"GetFollowerCount":       kitex.NewMethodInfo(getFollowerCountHandler, newSocialityServiceGetFollowerCountArgs, newSocialityServiceGetFollowerCountResult, false),
		"GetFollowingCount":      kitex.NewMethodInfo(getFollowingCountHandler, newSocialityServiceGetFollowingCountArgs, newSocialityServiceGetFollowingCountResult, false),
		"BatchCheckFollow":       kitex.NewMethodInfo(batchCheckFollowHandler, newSocialityServiceBatchCheckFollowArgs, newSocialityServiceBatchCheckFollowResult, false),
		"BatchGetFollowerCount":  kitex.NewMethodInfo(batchGetFollowerCountHandler, newSocialityServiceBatchGetFollowerCountArgs, newSocialityServiceBatchGetFollowerCountResult, false),
		"BatchGetFollowingCount": kitex.NewMethodInfo(batchGetFollowingCountHandler, newSocialityServiceBatchGetFollowingCountArgs, newSocialityServiceBatchGetFollowingCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "sociality",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceActionArgs)
	realResult := result.(*sociality.SocialityServiceActionResult)
	success, err := handler.(sociality.SocialityService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceActionArgs() interface{} {
	return sociality.NewSocialityServiceActionArgs()
}

func newSocialityServiceActionResult() interface{} {
	return sociality.NewSocialityServiceActionResult()
}

func getFollowingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceGetFollowingListArgs)
	realResult := result.(*sociality.SocialityServiceGetFollowingListResult)
	success, err := handler.(sociality.SocialityService).GetFollowingList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFollowingListArgs() interface{} {
	return sociality.NewSocialityServiceGetFollowingListArgs()
}

func newSocialityServiceGetFollowingListResult() interface{} {
	return sociality.NewSocialityServiceGetFollowingListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceGetFollowerListArgs)
	realResult := result.(*sociality.SocialityServiceGetFollowerListResult)
	success, err := handler.(sociality.SocialityService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFollowerListArgs() interface{} {
	return sociality.NewSocialityServiceGetFollowerListArgs()
}

func newSocialityServiceGetFollowerListResult() interface{} {
	return sociality.NewSocialityServiceGetFollowerListResult()
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceGetFriendListArgs)
	realResult := result.(*sociality.SocialityServiceGetFriendListResult)
	success, err := handler.(sociality.SocialityService).GetFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFriendListArgs() interface{} {
	return sociality.NewSocialityServiceGetFriendListArgs()
}

func newSocialityServiceGetFriendListResult() interface{} {
	return sociality.NewSocialityServiceGetFriendListResult()
}

func checkFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceCheckFollowArgs)
	realResult := result.(*sociality.SocialityServiceCheckFollowResult)
	success, err := handler.(sociality.SocialityService).CheckFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceCheckFollowArgs() interface{} {
	return sociality.NewSocialityServiceCheckFollowArgs()
}

func newSocialityServiceCheckFollowResult() interface{} {
	return sociality.NewSocialityServiceCheckFollowResult()
}

func getFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceGetFollowerCountArgs)
	realResult := result.(*sociality.SocialityServiceGetFollowerCountResult)
	success, err := handler.(sociality.SocialityService).GetFollowerCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFollowerCountArgs() interface{} {
	return sociality.NewSocialityServiceGetFollowerCountArgs()
}

func newSocialityServiceGetFollowerCountResult() interface{} {
	return sociality.NewSocialityServiceGetFollowerCountResult()
}

func getFollowingCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceGetFollowingCountArgs)
	realResult := result.(*sociality.SocialityServiceGetFollowingCountResult)
	success, err := handler.(sociality.SocialityService).GetFollowingCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceGetFollowingCountArgs() interface{} {
	return sociality.NewSocialityServiceGetFollowingCountArgs()
}

func newSocialityServiceGetFollowingCountResult() interface{} {
	return sociality.NewSocialityServiceGetFollowingCountResult()
}

func batchCheckFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceBatchCheckFollowArgs)
	realResult := result.(*sociality.SocialityServiceBatchCheckFollowResult)
	success, err := handler.(sociality.SocialityService).BatchCheckFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceBatchCheckFollowArgs() interface{} {
	return sociality.NewSocialityServiceBatchCheckFollowArgs()
}

func newSocialityServiceBatchCheckFollowResult() interface{} {
	return sociality.NewSocialityServiceBatchCheckFollowResult()
}

func batchGetFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceBatchGetFollowerCountArgs)
	realResult := result.(*sociality.SocialityServiceBatchGetFollowerCountResult)
	success, err := handler.(sociality.SocialityService).BatchGetFollowerCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceBatchGetFollowerCountArgs() interface{} {
	return sociality.NewSocialityServiceBatchGetFollowerCountArgs()
}

func newSocialityServiceBatchGetFollowerCountResult() interface{} {
	return sociality.NewSocialityServiceBatchGetFollowerCountResult()
}

func batchGetFollowingCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sociality.SocialityServiceBatchGetFollowingCountArgs)
	realResult := result.(*sociality.SocialityServiceBatchGetFollowingCountResult)
	success, err := handler.(sociality.SocialityService).BatchGetFollowingCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialityServiceBatchGetFollowingCountArgs() interface{} {
	return sociality.NewSocialityServiceBatchGetFollowingCountArgs()
}

func newSocialityServiceBatchGetFollowingCountResult() interface{} {
	return sociality.NewSocialityServiceBatchGetFollowingCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *sociality.DouyinRelationActionRequest) (r *sociality.DouyinRelationActionResponse, err error) {
	var _args sociality.SocialityServiceActionArgs
	_args.Req = req
	var _result sociality.SocialityServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowingList(ctx context.Context, req *sociality.DouyinGetRelationFollowListRequest) (r *sociality.DouyinGetRelationFollowListResponse, err error) {
	var _args sociality.SocialityServiceGetFollowingListArgs
	_args.Req = req
	var _result sociality.SocialityServiceGetFollowingListResult
	if err = p.c.Call(ctx, "GetFollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *sociality.DouyinGetRelationFollowerListRequest) (r *sociality.DouyinGetRelationFollowerListResponse, err error) {
	var _args sociality.SocialityServiceGetFollowerListArgs
	_args.Req = req
	var _result sociality.SocialityServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, req *sociality.DouyinGetRelationFriendListRequest) (r *sociality.DouyinGetRelationFriendListResponse, err error) {
	var _args sociality.SocialityServiceGetFriendListArgs
	_args.Req = req
	var _result sociality.SocialityServiceGetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckFollow(ctx context.Context, req *sociality.DouyinCheckFollowRequest) (r *sociality.DouyinCheckFollowResponse, err error) {
	var _args sociality.SocialityServiceCheckFollowArgs
	_args.Req = req
	var _result sociality.SocialityServiceCheckFollowResult
	if err = p.c.Call(ctx, "CheckFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerCount(ctx context.Context, req *sociality.DouyinGetFollowerCountRequest) (r *sociality.DouyinGetFollowerCountResponse, err error) {
	var _args sociality.SocialityServiceGetFollowerCountArgs
	_args.Req = req
	var _result sociality.SocialityServiceGetFollowerCountResult
	if err = p.c.Call(ctx, "GetFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowingCount(ctx context.Context, req *sociality.DouyinGetFollowingCountRequest) (r *sociality.DouyinGetFollowingCountResponse, err error) {
	var _args sociality.SocialityServiceGetFollowingCountArgs
	_args.Req = req
	var _result sociality.SocialityServiceGetFollowingCountResult
	if err = p.c.Call(ctx, "GetFollowingCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchCheckFollow(ctx context.Context, req *sociality.DouyinBatchCheckFollowRequest) (r *sociality.DouyinBatchCheckFollowResponse, err error) {
	var _args sociality.SocialityServiceBatchCheckFollowArgs
	_args.Req = req
	var _result sociality.SocialityServiceBatchCheckFollowResult
	if err = p.c.Call(ctx, "BatchCheckFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetFollowerCount(ctx context.Context, req *sociality.DouyinBatchGetFollowerCountRequest) (r *sociality.DouyinBatchGetFollowerCountResponse, err error) {
	var _args sociality.SocialityServiceBatchGetFollowerCountArgs
	_args.Req = req
	var _result sociality.SocialityServiceBatchGetFollowerCountResult
	if err = p.c.Call(ctx, "BatchGetFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetFollowingCount(ctx context.Context, req *sociality.DouyinBatchGetFollowingCountRequest) (r *sociality.DouyinBatchGetFollowingCountResponse, err error) {
	var _args sociality.SocialityServiceBatchGetFollowingCountArgs
	_args.Req = req
	var _result sociality.SocialityServiceBatchGetFollowingCountResult
	if err = p.c.Call(ctx, "BatchGetFollowingCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
